import streamlit as st
import pandas as pd
import csv
import heapq
from collections import defaultdict
import time

st.set_page_config(page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–µ–ª–µ–∫—Ü–∏–∏ –ö–†–°", page_icon="üêÑ", layout="wide")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–æ–¥—Å—Ç–≤–∞
def kinship(id1, id2, memo, pedigree):
	if id1 is None or id2 is None:
		return 0.0
	if id1 == id2:
		mother, father = pedigree.get(id1, (None, None))
		F = kinship(father, mother, memo, pedigree) if mother and father else 0.0
		return 0.5 * (1 + F)
	
	if id1 > id2:
		id1, id2 = id2, id1
	key = (id1, id2)
	if key in memo:
		return memo[key]
	
	mother2, father2 = pedigree.get(id2, (None, None))
	a_val = 0.0
	count = 0
	if father2:
		a_val += kinship(id1, father2, memo, pedigree)
		count += 1
	if mother2:
		a_val += kinship(id1, mother2, memo, pedigree)
		count += 1
	
	a_val = a_val * 0.5 if count else 0.0
	memo[key] = a_val
	return a_val


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def process_data(pedigree_file, bulls_file, cows_file, max_kinship, max_usage_percent):
	# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	pedigree_df = pd.read_csv(pedigree_file)
	bulls_df = pd.read_csv(bulls_file)
	cows_df = pd.read_csv(cows_file)
	
	# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–∏ –∏ —Å–ø–∏—Å–∫–∏
	pedigree = {}
	for _, row in pedigree_df.iterrows():
		id_ = str(row['id'])
		mother = str(row['mother_id']) if pd.notna(row['mother_id']) else None
		father = str(row['father_id']) if pd.notna(row['father_id']) else None
		pedigree[id_] = (mother, father)
	
	bulls = []
	for _, row in bulls_df.iterrows():
		bulls.append({'id': str(row['id']), 'ebv': float(row['ebv'])})
	
	cows = []
	for _, row in cows_df.iterrows():
		cows.append({'id': str(row['id']), 'ebv': float(row['ebv'])})
	
	# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Ä–æ–¥–æ—Å–ª–æ–≤–Ω—É—é
	all_animals = set(pedigree.keys()) | {b['id'] for b in bulls} | {c['id'] for c in cows}
	for animal in all_animals:
		if animal not in pedigree:
			pedigree[animal] = (None, None)
	
	# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–∞—Ä
	memo = {}
	bull_ebv = {b['id']: b['ebv'] for b in bulls}
	n_cows = len(cows)
	
	# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
	max_uses = max(1, int(n_cows * max_usage_percent / 100))
	
	# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	progress_bar = st.progress(0)
	status_text = st.empty()
	
	# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
	cow_candidates = []
	valid_pairs_count = 0
	rejected_pairs = []
	
	for i, cow in enumerate(cows):
		candidates = []
		for bull in bulls:
			a_val = kinship(bull['id'], cow['id'], memo, pedigree)
			if a_val <= max_kinship:
				combined_sq = (bull['ebv'] + cow['ebv']) ** 2
				candidates.append((bull['id'], bull['ebv'], combined_sq))
				valid_pairs_count += 1
			else:
				rejected_pairs.append({
					'bull_id': bull['id'],
					'bull_ebv': bull['ebv'],
					'cow_id': cow['id'],
					'cow_ebv': cow['ebv'],
					'kinship': a_val
				})
		candidates.sort(key=lambda x: (x[1], x[2]), reverse=True)
		cow_candidates.append([c[0] for c in candidates])
		
		# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
		progress = (i + 1) / n_cows * 0.5
		progress_bar.progress(progress)
		status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä–æ–≤: {i + 1}/{n_cows} | –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {valid_pairs_count} | –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len(rejected_pairs)}")
	
	# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–∫–æ–≤
	assignment = [None] * n_cows
	bull_use_count = {bull['id']: 0 for bull in bulls}
	current_index = [0] * n_cows
	heap = []
	assigned_count = 0
	
	for i in range(n_cows):
		if cow_candidates[i]:
			bull_id = cow_candidates[i][0]
			priority = bull_ebv[bull_id]
			heapq.heappush(heap, (-priority, i, 0))
	
	while heap:
		neg_priority, cow_idx, idx = heapq.heappop(heap)
		if idx >= len(cow_candidates[cow_idx]):
			continue
		
		bull_id = cow_candidates[cow_idx][idx]
		if bull_use_count.get(bull_id, 0) < max_uses:
			assignment[cow_idx] = bull_id
			bull_use_count[bull_id] = bull_use_count.get(bull_id, 0) + 1
			assigned_count += 1
		else:
			next_idx = idx + 1
			if next_idx < len(cow_candidates[cow_idx]):
				current_index[cow_idx] = next_idx
				next_bull_id = cow_candidates[cow_idx][next_idx]
				next_priority = bull_ebv[next_bull_id]
				heapq.heappush(heap, (-next_priority, cow_idx, next_idx))
		
		# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
		progress = 0.5 + (assigned_count / n_cows) * 0.5
		progress_bar.progress(min(progress, 1.0))
		status_text.text(f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ –ø–∞—Ä: {assigned_count}/{n_cows} | –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses} | –û–±—Ä–∞–±–æ—Ç–∫–∞...")
	
	# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ DataFrame
	result_data = []
	for cow, bull_id in zip(cows, assignment):
		result_data.append({
			'cow_id': cow['id'],
			'cow_ebv': cow['ebv'],
			'assigned_bull_id': bull_id if bull_id else 'N/A',
			'bull_ebv': bull_ebv.get(bull_id, 'N/A'),
			'expected_ebv': (cow['ebv'] + bull_ebv[bull_id]) / 2 if bull_id else 'N/A'
		})
	
	result_df = pd.DataFrame(result_data)
	
	# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	stats = {
		"–í—Å–µ–≥–æ –∫–æ—Ä–æ–≤": n_cows,
		"–£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": f"{assigned_count} ({assigned_count / n_cows * 100:.1f}%)",
		"–°—Ä–µ–¥–Ω–∏–π EBV –ø–æ—Ç–æ–º—Å—Ç–≤–∞": result_df[result_df['expected_ebv'] != 'N/A']['expected_ebv'].mean(),
		"–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –Ω–∞ –±—ã–∫–∞": max_uses,
		"–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": n_cows - assigned_count,
		"–ú–∞–∫—Å. –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–æ–¥—Å—Ç–≤–æ": f"{max_kinship * 100:.1f}%",
		"–ú–∞–∫—Å. % –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—ã–∫–∞": f"{max_usage_percent}%"
	}
	
	progress_bar.empty()
	status_text.empty()
	
	return result_df, stats, pd.DataFrame(rejected_pairs)


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üêÑ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–µ–ª–µ–∫—Ü–∏–∏ –∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞")
st.markdown("""
**–ó–∞–¥–∞—á–∞:** –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –æ–∂–∏–¥–∞–µ–º—É—é —Å–µ–ª–µ–∫—Ü–∏–æ–Ω–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–º—Å—Ç–≤–∞ (EBV) –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è.

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
- –†–æ–¥—Å—Ç–≤–æ –≤ –ø–∞—Ä–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
- –û–¥–∏–Ω –±—ã–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Å–µ–º–µ–Ω–∏—Ç—å –±–æ–ª–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ—Ä–æ–≤
""")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
col1, col2 = st.columns(2)
with col1:
	max_kinship = st.slider(
		"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ–¥—Å—Ç–≤–∞",
		min_value=0.0,
		max_value=0.5,
		value=0.05,import streamlit as st
import pandas as pd
import numpy as np
import heapq
from collections import defaultdict
import time
import networkx as nx

st.set_page_config(page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–µ–ª–µ–∫—Ü–∏–∏ –ö–†–° BLUP AM", page_icon="üêÑ", layout="wide")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–æ–¥—Å—Ç–≤–∞
def kinship(id1, id2, memo, pedigree):
    if id1 is None or id2 is None:
        return 0.0
    if id1 == id2:
        mother, father = pedigree.get(id1, (None, None))
        F = kinship(father, mother, memo, pedigree) if mother and father else 0.0
        return 0.5 * (1 + F)
    
    if id1 > id2:
        id1, id2 = id2, id1
    key = (id1, id2)
    if key in memo:
        return memo[key]
    
    mother2, father2 = pedigree.get(id2, (None, None))
    a_val = 0.0
    count = 0
    if father2:
        a_val += kinship(id1, father2, memo, pedigree)
        count += 1
    if mother2:
        a_val += kinship(id1, mother2, memo, pedigree)
        count += 1
    
    a_val = a_val * 0.5 if count else 0.0
    memo[key] = a_val
    return a_val

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∏–Ω–±—Ä–∏–¥–∏–Ω–≥–∞
def calculate_inbreeding(animal_id, pedigree, memo_inbreeding):
    if animal_id not in pedigree:
        return 0.0
    
    if animal_id in memo_inbreeding:
        return memo_inbreeding[animal_id]
    
    sire_id, dam_id = pedigree[animal_id]
    
    if sire_id is None or dam_id is None:
        return 0.0
    
    F_sire = calculate_inbreeding(sire_id, pedigree, memo_inbreeding)
    F_dam = calculate_inbreeding(dam_id, pedigree, memo_inbreeding)
    
    F = kinship(sire_id, dam_id, {}, pedigree)
    
    memo_inbreeding[animal_id] = F
    return F

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ (Reliability)
def calculate_reliability(animal_id, pedigree, base_reliability=0.3):
    """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª—É–±–∏–Ω—ã —Ä–æ–¥–æ—Å–ª–æ–≤–Ω–æ–π"""
    if animal_id not in pedigree:
        return base_reliability
    
    sire_id, dam_id = pedigree[animal_id]
    rel_sire = base_reliability if sire_id is None else calculate_reliability(sire_id, pedigree)
    rel_dam = base_reliability if dam_id is None else calculate_reliability(dam_id, pedigree)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö
    reliability = 0.5 * (rel_sire + rel_dam) * 1.2
    return min(reliability, 0.95)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ä–æ–¥—Å—Ç–≤–∞ A
def build_relationship_matrix(animal_ids, pedigree):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ–¥—Å—Ç–≤–∞ A"""
    n = len(animal_ids)
    A = np.eye(n)
    id_to_idx = {id_: idx for idx, id_ in enumerate(animal_ids)}
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–Ω–±—Ä–∏–¥–∏–Ω–≥–∞ –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    memo_inbreeding = {}
    inbreeding_coeffs = {}
    for animal_id in animal_ids:
        inbreeding_coeffs[animal_id] = calculate_inbreeding(animal_id, pedigree, memo_inbreeding)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å: 1 + F
    for i, animal_id in enumerate(animal_ids):
        A[i, i] = 1 + inbreeding_coeffs[animal_id]
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–Ω–µ–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for i, id1 in enumerate(animal_ids):
        for j, id2 in enumerate(animal_ids):
            if i < j:
                a_val = kinship(id1, id2, {}, pedigree)
                A[i, j] = A[j, i] = a_val
                
    return A

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def process_data(pedigree_file, bulls_file, cows_file, max_kinship, max_usage_percent, h2=0.3):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    pedigree_df = pd.read_csv(pedigree_file)
    bulls_df = pd.read_csv(bulls_file)
    cows_df = pd.read_csv(cows_file)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–∏ –∏ —Å–ø–∏—Å–∫–∏
    pedigree = {}
    for _, row in pedigree_df.iterrows():
        id_ = str(row['id'])
        mother = str(row['mother_id']) if pd.notna(row['mother_id']) else None
        father = str(row['father_id']) if pd.notna(row['father_id']) else None
        pedigree[id_] = (mother, father)
    
    bulls = []
    for _, row in bulls_df.iterrows():
        bulls.append({
            'id': str(row['id']),
            'ebv': float(row['ebv']),
            'pt–∞': float(row['ebv']) / 2  # PTA = EBV/2
        })
    
    cows = []
    for _, row in cows_df.iterrows():
        cows.append({
            'id': str(row['id']),
            'ebv': float(row['ebv']),
            'pt–∞': float(row['ebv']) / 2  # PTA = EBV/2
        })
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Ä–æ–¥–æ—Å–ª–æ–≤–Ω—É—é
    all_animals = set(pedigree.keys()) | {b['id'] for b in bulls} | {c['id'] for c in cows}
    for animal in all_animals:
        if animal not in pedigree:
            pedigree[animal] = (None, None)
    
    # –†–∞—Å—á—ë—Ç –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ (Reliability)
    for animal_list in [bulls, cows]:
        for animal in animal_list:
            animal['reliability'] = calculate_reliability(animal['id'], pedigree)
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–æ–¥—Å—Ç–≤–∞ A (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    animal_ids = sorted(all_animals)
    A_matrix = build_relationship_matrix(animal_ids, pedigree)
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–∞—Ä
    memo = {}
    bull_ebv = {b['id']: b['ebv'] for b in bulls}
    bull_pta = {b['id']: b['pt–∞'] for b in bulls}
    n_cows = len(cows)
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    max_uses = max(1, int(n_cows * max_usage_percent / 100))
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    cow_candidates = []
    valid_pairs_count = 0
    rejected_pairs = []
    
    for i, cow in enumerate(cows):
        candidates = []
        for bull in bulls:
            a_val = kinship(bull['id'], cow['id'], memo, pedigree)
            if a_val <= max_kinship:
                # –£—á—ë—Ç –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –≤ –æ—Ü–µ–Ω–∫–µ
                combined_score = (bull['pt–∞'] + cow['pt–∞']) * (bull['reliability'] + cow['reliability'])
                candidates.append((bull['id'], bull['pt–∞'], combined_score))
                valid_pairs_count += 1
            else:
                rejected_pairs.append({
                    'bull_id': bull['id'],
                    'bull_ebv': bull['ebv'],
                    'cow_id': cow['id'],
                    'cow_ebv': cow['ebv'],
                    'kinship': a_val
                })
        candidates.sort(key=lambda x: (x[1], x[2]), reverse=True)
        cow_candidates.append([c[0] for c in candidates])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = (i + 1) / n_cows * 0.5
        progress_bar.progress(progress)
        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä–æ–≤: {i + 1}/{n_cows} | –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {valid_pairs_count} | –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len(rejected_pairs)}")
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–∫–æ–≤
    assignment = [None] * n_cows
    bull_use_count = {bull['id']: 0 for bull in bulls}
    current_index = [0] * n_cows
    heap = []
    assigned_count = 0
    
    for i in range(n_cows):
        if cow_candidates[i]:
            bull_id = cow_candidates[i][0]
            priority = bull_pta[bull_id]
            heapq.heappush(heap, (-priority, i, 0))
    
    while heap:
        neg_priority, cow_idx, idx = heapq.heappop(heap)
        if idx >= len(cow_candidates[cow_idx]):
            continue
        
        bull_id = cow_candidates[cow_idx][idx]
        if bull_use_count.get(bull_id, 0) < max_uses:
            assignment[cow_idx] = bull_id
            bull_use_count[bull_id] = bull_use_count.get(bull_id, 0) + 1
            assigned_count += 1
        else:
            next_idx = idx + 1
            if next_idx < len(cow_candidates[cow_idx]):
                current_index[cow_idx] = next_idx
                next_bull_id = cow_candidates[cow_idx][next_idx]
                next_priority = bull_pta[next_bull_id]
                heapq.heappush(heap, (-next_priority, cow_idx, next_idx))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = 0.5 + (assigned_count / n_cows) * 0.5
        progress_bar.progress(min(progress, 1.0))
        status_text.text(f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ –ø–∞—Ä: {assigned_count}/{n_cows} | –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses} | –û–±—Ä–∞–±–æ—Ç–∫–∞...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ DataFrame
    result_data = []
    for cow, bull_id in zip(cows, assignment):
        bull_ebv_val = bull_ebv.get(bull_id, np.nan)
        bull_pta_val = bull_pta.get(bull_id, np.nan)
        
        if bull_id:
            expected_pta = (bull_pta_val + cow['pt–∞']) / 2
            expected_ebv = expected_pta * 2
            expected_ppa = expected_pta + cow.get('environment_effect', 0)  # PPA = PTA + —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–µ–¥—ã
        else:
            expected_pta = expected_ebv = expected_ppa = np.nan
        
        result_data.append({
            'cow_id': cow['id'],
            'cow_ebv': cow['ebv'],
            'cow_pta': cow['pt–∞'],
            'cow_reliability': cow['reliability'],
            'assigned_bull_id': bull_id if bull_id else 'N/A',
            'bull_ebv': bull_ebv_val,
            'bull_pta': bull_pta_val,
            'expected_pta': expected_pta,
            'expected_ebv': expected_ebv,
            'expected_ppa': expected_ppa
        })
    
    result_df = pd.DataFrame(result_data)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        "–í—Å–µ–≥–æ –∫–æ—Ä–æ–≤": n_cows,
        "–£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": f"{assigned_count} ({assigned_count / n_cows * 100:.1f}%)",
        "–°—Ä–µ–¥–Ω–∏–π EBV –ø–æ—Ç–æ–º—Å—Ç–≤–∞": result_df['expected_ebv'].mean(),
        "–°—Ä–µ–¥–Ω–∏–π PPA –ø–æ—Ç–æ–º—Å—Ç–≤–∞": result_df['expected_ppa'].mean(),
        "–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –Ω–∞ –±—ã–∫–∞": max_uses,
        "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": n_cows - assigned_count,
        "–ú–∞–∫—Å. –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–æ–¥—Å—Ç–≤–æ": f"{max_kinship*100:.1f}%",
        "–ú–∞–∫—Å. % –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—ã–∫–∞": f"{max_usage_percent}%",
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞—Å–ª–µ–¥—É–µ–º–æ—Å—Ç–∏ (h¬≤)": f"{h2*100:.1f}%"
    }
    
    progress_bar.empty()
    status_text.empty()
    
    return result_df, stats, pd.DataFrame(rejected_pairs), A_matrix

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üêÑ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–µ–ª–µ–∫—Ü–∏–∏ –ö–†–° –Ω–∞ –æ—Å–Ω–æ–≤–µ BLUP Animal Model")
st.markdown("""
**–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è:** –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è BLUP Animal Model –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–ª–µ–º–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Å —É—á—ë—Ç–æ–º:
- –í—Å–µ—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π (–º–∞—Ç—Ä–∏—Ü–∞ —Ä–æ–¥—Å—Ç–≤–∞ A)
- –ü–µ—Ä–µ–¥–∞—é—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (PTA = EBV/2)
- –ü—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (PPA)
- –ù–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏ (Reliability)

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
- –†–æ–¥—Å—Ç–≤–æ –≤ –ø–∞—Ä–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
- –û–¥–∏–Ω –±—ã–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Å–µ–º–µ–Ω–∏—Ç—å –±–æ–ª–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ—Ä–æ–≤
""")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏")
col1, col2, col3 = st.columns(3)
with col1:
    max_kinship = st.slider(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ–¥—Å—Ç–≤–∞",
        min_value=0.0,
        max_value=0.5,
        value=0.05,
        step=0.01,
        format="%.2f",
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –±—ã–∫–æ–º –∏ –∫–æ—Ä–æ–≤–æ–π"
    )
with col2:
    max_usage_percent = st.slider(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –±—ã–∫–∞",
        min_value=1,
        max_value=100,
        value=10,
        step=1,
        format="%d%%",
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –æ—Å–µ–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –±—ã–∫"
    )
with col3:
    h2 = st.slider(
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞—Å–ª–µ–¥—É–µ–º–æ—Å—Ç–∏ (h¬≤)",
        min_value=0.1,
        max_value=0.9,
        value=0.3,
        step=0.05,
        format="%.2f",
        help="–î–æ–ª—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ –≤ –æ–±—â–µ–π —Ñ–µ–Ω–æ—Ç–∏–ø–∏—á–µ—Å–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Å–µ"
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
st.header("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
col1, col2, col3 = st.columns(3)
with col1:
    pedigree_file = st.file_uploader("–†–æ–¥–æ—Å–ª–æ–≤–Ω—ã–µ (pedigree.csv)", type="csv")
with col2:
    bulls_file = st.file_uploader("–ë—ã–∫–∏ (bulls.csv)", type="csv")
with col3:
    cows_file = st.file_uploader("–ö–æ—Ä–æ–≤—ã (cows.csv)", type="csv")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é", disabled=(pedigree_file is None or bulls_file is None or cows_file is None)):
    if pedigree_file and bulls_file and cows_file:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BLUP Animal Model..."):
            start_time = time.time()
            result_df, stats, rejected_df, A_matrix = process_data(
                pedigree_file,
                bulls_file,
                cows_file,
                max_kinship,
                max_usage_percent,
                h2
            )
            processing_time = time.time() - start_time
        
        st.success(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥!")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏")
        stats_df = pd.DataFrame(list(stats.items()), columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
        st.table(stats_df)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ PTA –ø–æ—Ç–æ–º—Å—Ç–≤–∞")
            if 'expected_pta' in result_df.columns:
                valid_pta = result_df[result_df['expected_pta'].notna()]['expected_pta']
                if not valid_pta.empty:
                    st.bar_chart(valid_pta.value_counts().sort_index())
        
        with col2:
            st.subheader("–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ (Reliability)")
            if 'cow_reliability' in result_df.columns:
                reliability = result_df['cow_reliability'] * 100
                st.bar_chart(reliability.value_counts().sort_index())
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        st.header("üß¨ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –±—ã–∫–æ–≤ –∫–æ—Ä–æ–≤–∞–º")
        st.dataframe(result_df.style.format({
            "cow_pta": "{:.2f}",
            "bull_pta": "{:.2f}",
            "expected_pta": "{:.2f}",
            "expected_ebv": "{:.2f}",
            "expected_ppa": "{:.2f}",
            "cow_reliability": "{:.1%}"
        }), height=500)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä
        if not rejected_df.empty:
            with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä (–∏–∑-–∑–∞ —Ä–æ–¥—Å—Ç–≤–∞)"):
                st.dataframe(rejected_df)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ä–æ–¥—Å—Ç–≤–∞
        st.header("üß¨ –ú–∞—Ç—Ä–∏—Ü–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ–¥—Å—Ç–≤–∞ (A)")
        st.caption("–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: 1 + F (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω–±—Ä–∏–¥–∏–Ω–≥–∞)")
        st.dataframe(pd.DataFrame(A_matrix).style.format("{:.3f}"))
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.header("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        csv_data = result_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (CSV)",
            data=csv_data,
            file_name="blup_am_assignments.csv",
            mime="text/csv"
        )
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã!")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ BLUP AM
with st.expander("‚ÑπÔ∏è –û –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ BLUP Animal Model"):
    st.markdown("""
    **BLUP Animal Model (BLUP AM)** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ –ø–ª–µ–º–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—é—â–∏–π:
    
    1. **–í—Å–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏**:
       - –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
       - –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–∫–æ–≤ (—Ä–æ–¥–∏—Ç–µ–ª–∏, –±–∞–±—É—à–∫–∏/–¥–µ–¥—É—à–∫–∏)
       - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–º–∫–∞—Ö
       - –î–∞–Ω–Ω—ã–µ –±–æ–∫–æ–≤—ã—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ (—Å–∏–±—Å—ã)
    
    2. **–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**:
       - **EBV (Estimated Breeding Value)**: –û—Ü–µ–Ω–∫–∞ –ø–ª–µ–º–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
       - **PTA (Predicted Transmitting Ability)**: EBV/2 - –ø–µ—Ä–µ–¥–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
       - **PPA (Predicted Producing Ability)**: PTA + —ç—Ñ—Ñ–µ–∫—Ç—ã —Å—Ä–µ–¥—ã
       - **Reliability**: –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ (0-100%)
    
    3. **–ú–∞—Ç—Ä–∏—Ü–∞ —Ä–æ–¥—Å—Ç–≤–∞ (A)**:
       ```math
       A_{ii} = 1 + F_i \\ (F_i - \text{–∏–Ω–±—Ä–∏–¥–∏–Ω–≥})
       ```
       ```math
       A_{ij} = 2 \times \text{kinship}(i,j)
       ```
    
    4. **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
       - –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–æ–∫ –Ω–∞ 30-35% –≤—ã—à–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
       - –£—á—ë—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –∏ –∏–Ω–±—Ä–∏–¥–∏–Ω–≥–∞
       - –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –±—ã–∫–æ–≤ –∏ –∫–æ—Ä–æ–≤
    
    **–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å**:
    ```math
    Y_{ijkl} = M_{ij} + A_{kl} + P_{kl} + C_{ik} + E_{ijkl}
    ```
    - $M_{ij}$ - —É—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (—Å—Ç–∞–¥–æ-–≥–æ–¥-—Å–µ–∑–æ–Ω)
    - $A_{kl}$ - –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    - $P_{kl}$ - –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–µ–¥—ã
    - $C_{ik}$ - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ "—Å—Ç–∞–¥–æ-–±—ã–∫"
    - $E_{ijkl}$ - —Å–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞
    """)
    
    st.image("https://raw.githubusercontent.com/your_repo/blup_am_diagram.png", caption="–°—Ö–µ–º–∞ BLUP Animal Model")

st.markdown("---")
st.caption("¬© 2025 –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–µ–ª–µ–∫—Ü–∏–∏ –ö–†–° | –†–µ–∞–ª–∏–∑–∞—Ü–∏—è BLUP Animal Model –¥–ª—è —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏")
		step=0.01,
		format="%.2f",
		help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –±—ã–∫–æ–º –∏ –∫–æ—Ä–æ–≤–æ–π"
	)
with col2:
	max_usage_percent = st.slider(
		"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –±—ã–∫–∞",
		min_value=1,
		max_value=100,
		value=10,
		step=1,
		format="%d%%",
		help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –æ—Å–µ–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –±—ã–∫"
	)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
st.header("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
col1, col2, col3 = st.columns(3)
with col1:
	pedigree_file = st.file_uploader("–†–æ–¥–æ—Å–ª–æ–≤–Ω—ã–µ (pedigree.csv)", type="csv")
with col2:
	bulls_file = st.file_uploader("–ë—ã–∫–∏ (bulls.csv)", type="csv")
with col3:
	cows_file = st.file_uploader("–ö–æ—Ä–æ–≤—ã (cows.csv)", type="csv")

# –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
with st.expander("–ü—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"):
	st.markdown("**pedigree.csv**")
	st.code("""id,mother_id,father_id
1,,
2,,
3,1,2
4,1,2
5,3,4""")
	
	st.markdown("**bulls.csv**")
	st.code("""id,ebv
B001,120
B002,115
B003,125""")
	
	st.markdown("**cows.csv**")
	st.code("""id,ebv
C001,100
C002,105
C003,95""")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é", disabled=(pedigree_file is None or bulls_file is None or cows_file is None)):
	if pedigree_file and bulls_file and cows_file:
		with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
			start_time = time.time()
			result_df, stats, rejected_df = process_data(
				pedigree_file,
				bulls_file,
				cows_file,
				max_kinship,
				max_usage_percent
			)
			processing_time = time.time() - start_time
		
		st.success(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥!")
		
		# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
		stats_df = pd.DataFrame(list(stats.items()), columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
		st.table(stats_df)
		
		# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
		col1, col2 = st.columns(2)
		with col1:
			st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ EBV –ø–æ—Ç–æ–º—Å—Ç–≤–∞")
			if 'expected_ebv' in result_df.columns:
				valid_ebv = result_df[result_df['expected_ebv'] != 'N/A']['expected_ebv']
				if not valid_ebv.empty:
					st.bar_chart(valid_ebv.value_counts().sort_index())
		
		with col2:
			st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—ã–∫–æ–≤")
			if 'assigned_bull_id' in result_df.columns:
				bull_usage = result_df[result_df['assigned_bull_id'] != 'N/A']['assigned_bull_id'].value_counts()
				if not bull_usage.empty:
					st.bar_chart(bull_usage)
		
		# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
		st.header("üß¨ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –±—ã–∫–æ–≤ –∫–æ—Ä–æ–≤–∞–º")
		st.dataframe(result_df.style.format({"expected_ebv": "{:.2f}"}), height=500)
		
		# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä
		if not rejected_df.empty:
			with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä (–∏–∑-–∑–∞ —Ä–æ–¥—Å—Ç–≤–∞)"):
				st.dataframe(rejected_df)
		
		# –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		st.header("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
		csv_data = result_df.to_csv(index=False).encode('utf-8')
		st.download_button(
			label="–°–∫–∞—á–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (CSV)",
			data=csv_data,
			file_name="bull_assignments.csv",
			mime="text/csv"
		)
	else:
		st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã!")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
with st.expander("‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º"):
	st.markdown(f"""
**–ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å –≥–∏–±–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:**

1. **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
   - –ú–∞–∫—Å. —Ä–æ–¥—Å—Ç–≤–æ: `{max_kinship}` (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏ –±–ª–∏–∑–∫–∏—Ö –ø–∞—Ä)
   - –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—ã–∫–∞: `{max_usage_percent}%` (–∫–æ–Ω—Ç—Ä–æ–ª—å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)

2. **–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã:**
   - –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–æ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä
   - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä —Å —Ä–æ–¥—Å—Ç–≤–æ–º > `{max_kinship}`
   - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ—Ä–æ–≤—ã
   - –ñ–∞–¥–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è `{max_usage_percent}%`
   - –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ EBV –ø–æ—Ç–æ–º—Å—Ç–≤–∞

3. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:**
   - –ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ EBV –ø–æ—Ç–æ–º—Å—Ç–≤–∞
   - –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–±—Ä–∏–¥–∏–Ω–≥–∞
   - –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—ã–∫–æ–≤-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
""")

st.markdown("---")
st.caption("¬© 2025 –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–µ–ª–µ–∫—Ü–∏–∏ –ö–†–° | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ dzhankui@bk.ru –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞")