import streamlit as st
import pandas as pd
import csv
import heapq
from collections import defaultdict
import time

st.set_page_config(page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–µ–ª–µ–∫—Ü–∏–∏ –ö–†–°", page_icon="üêÑ", layout="wide")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–æ–¥—Å—Ç–≤–∞
def kinship(id1, id2, memo, pedigree):
	if id1 is None or id2 is None:
		return 0.0
	if id1 == id2:
		mother, father = pedigree.get(id1, (None, None))
		F = kinship(father, mother, memo, pedigree) if mother and father else 0.0
		return 0.5 * (1 + F)
	
	if id1 > id2:
		id1, id2 = id2, id1
	key = (id1, id2)
	if key in memo:
		return memo[key]
	
	mother2, father2 = pedigree.get(id2, (None, None))
	a_val = 0.0
	count = 0
	if father2:
		a_val += kinship(id1, father2, memo, pedigree)
		count += 1
	if mother2:
		a_val += kinship(id1, mother2, memo, pedigree)
		count += 1
	
	a_val = a_val * 0.5 if count else 0.0
	memo[key] = a_val
	return a_val


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def process_data(pedigree_file, bulls_file, cows_file):
	# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	pedigree_df = pd.read_csv(pedigree_file)
	bulls_df = pd.read_csv(bulls_file)
	cows_df = pd.read_csv(cows_file)
	
	# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–∏ –∏ —Å–ø–∏—Å–∫–∏
	pedigree = {}
	for _, row in pedigree_df.iterrows():
		id_ = str(row['id'])
		mother = str(row['mother_id']) if pd.notna(row['mother_id']) else None
		father = str(row['father_id']) if pd.notna(row['father_id']) else None
		pedigree[id_] = (mother, father)
	
	bulls = []
	for _, row in bulls_df.iterrows():
		bulls.append({'id': str(row['id']), 'ebv': float(row['ebv'])})
	
	cows = []
	for _, row in cows_df.iterrows():
		cows.append({'id': str(row['id']), 'ebv': float(row['ebv'])})
	
	# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Ä–æ–¥–æ—Å–ª–æ–≤–Ω—É—é
	all_animals = set(pedigree.keys()) | {b['id'] for b in bulls} | {c['id'] for c in cows}
	for animal in all_animals:
		if animal not in pedigree:
			pedigree[animal] = (None, None)
	
	# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–∞—Ä
	memo = {}
	bull_ebv = {b['id']: b['ebv'] for b in bulls}
	n_cows = len(cows)
	max_uses = max(1, (n_cows + 9) // 10)  # ceil(0.1 * n_cows)
	
	# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	progress_bar = st.progress(0)
	status_text = st.empty()
	
	# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
	cow_candidates = []
	valid_pairs_count = 0
	
	for i, cow in enumerate(cows):
		candidates = []
		for bull in bulls:
			a_val = kinship(bull['id'], cow['id'], memo, pedigree)
			if a_val <= 0.05:
				combined_sq = (bull['ebv'] + cow['ebv']) ** 2
				candidates.append((bull['id'], bull['ebv'], combined_sq))
				valid_pairs_count += 1
		candidates.sort(key=lambda x: (x[1], x[2]), reverse=True)
		cow_candidates.append([c[0] for c in candidates])
		
		# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
		progress = (i + 1) / n_cows * 0.5
		progress_bar.progress(progress)
		status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä–æ–≤: {i + 1}/{n_cows} | –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {valid_pairs_count}")
	
	# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–∫–æ–≤
	assignment = [None] * n_cows
	bull_use_count = {bull['id']: 0 for bull in bulls}
	current_index = [0] * n_cows
	heap = []
	assigned_count = 0
	
	for i in range(n_cows):
		if cow_candidates[i]:
			bull_id = cow_candidates[i][0]
			priority = bull_ebv[bull_id]
			heapq.heappush(heap, (-priority, i, 0))
	
	while heap:
		neg_priority, cow_idx, idx = heapq.heappop(heap)
		if idx >= len(cow_candidates[cow_idx]):
			continue
		
		bull_id = cow_candidates[cow_idx][idx]
		if bull_use_count.get(bull_id, 0) < max_uses:
			assignment[cow_idx] = bull_id
			bull_use_count[bull_id] = bull_use_count.get(bull_id, 0) + 1
			assigned_count += 1
		else:
			next_idx = idx + 1
			if next_idx < len(cow_candidates[cow_idx]):
				current_index[cow_idx] = next_idx
				next_bull_id = cow_candidates[cow_idx][next_idx]
				next_priority = bull_ebv[next_bull_id]
				heapq.heappush(heap, (-next_priority, cow_idx, next_idx))
		
		# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
		progress = 0.5 + (assigned_count / n_cows) * 0.5
		progress_bar.progress(min(progress, 1.0))
		status_text.text(f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ –ø–∞—Ä: {assigned_count}/{n_cows} | –û–±—Ä–∞–±–æ—Ç–∫–∞...")
	
	# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ DataFrame
	result_data = []
	for cow, bull_id in zip(cows, assignment):
		result_data.append({
			'cow_id': cow['id'],
			'cow_ebv': cow['ebv'],
			'assigned_bull_id': bull_id if bull_id else 'N/A',
			'bull_ebv': bull_ebv.get(bull_id, 'N/A'),
			'expected_ebv': (cow['ebv'] + bull_ebv[bull_id]) / 2 if bull_id else 'N/A'
		})
	
	result_df = pd.DataFrame(result_data)
	
	# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	stats = {
		"–í—Å–µ–≥–æ –∫–æ—Ä–æ–≤": n_cows,
		"–£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": f"{assigned_count} ({assigned_count / n_cows * 100:.1f}%)",
		"–°—Ä–µ–¥–Ω–∏–π EBV –ø–æ—Ç–æ–º—Å—Ç–≤–∞": result_df['expected_ebv'].mean(),
		"–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –Ω–∞ –±—ã–∫–∞": max_uses,
		"–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": n_cows - assigned_count
	}
	
	progress_bar.empty()
	status_text.empty()
	
	return result_df, stats


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üêÑ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–µ–ª–µ–∫—Ü–∏–∏ –∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞")
st.markdown("""
**–ó–∞–¥–∞—á–∞:** –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –æ–∂–∏–¥–∞–µ–º—É—é —Å–µ–ª–µ–∫—Ü–∏–æ–Ω–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–º—Å—Ç–≤–∞ (EBV) –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è.

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
- –†–æ–¥—Å—Ç–≤–æ –≤ –ø–∞—Ä–µ ‚â§ 5%
- –û–¥–∏–Ω –±—ã–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Å–µ–º–µ–Ω–∏—Ç—å –±–æ–ª–µ–µ 10% –∫–æ—Ä–æ–≤
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
col1, col2, col3 = st.columns(3)
with col1:
	pedigree_file = st.file_uploader("–†–æ–¥–æ—Å–ª–æ–≤–Ω—ã–µ (pedigree.csv)", type="csv")
with col2:
	bulls_file = st.file_uploader("–ë—ã–∫–∏ (bulls.csv)", type="csv")
with col3:
	cows_file = st.file_uploader("–ö–æ—Ä–æ–≤—ã (cows.csv)", type="csv")

# –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
with st.expander("–ü—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"):
	st.markdown("**pedigree.csv**")
	st.code("""id,mother_id,father_id
1,,
2,,
3,1,2
4,1,2
5,3,4""")
	
	st.markdown("**bulls.csv**")
	st.code("""id,ebv
B001,120
B002,115
B003,125""")
	
	st.markdown("**cows.csv**")
	st.code("""id,ebv
C001,100
C002,105
C003,95""")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é", disabled=(pedigree_file is None or bulls_file is None or cows_file is None)):
	if pedigree_file and bulls_file and cows_file:
		with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
			start_time = time.time()
			result_df, stats = process_data(pedigree_file, bulls_file, cows_file)
			processing_time = time.time() - start_time
		
		st.success(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥!")
		
		# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
		stats_df = pd.DataFrame(list(stats.items()), columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
		st.table(stats_df)
		
		# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
		st.header("üß¨ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –±—ã–∫–æ–≤ –∫–æ—Ä–æ–≤–∞–º")
		st.dataframe(result_df.style.format({"expected_ebv": "{:.2f}"}), height=500)
		
		# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è EBV
		st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ EBV –ø–æ—Ç–æ–º—Å—Ç–≤–∞")
		if 'expected_ebv' in result_df.columns:
			st.bar_chart(result_df['expected_ebv'].value_counts().sort_index())
		
		# –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		st.header("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
		csv_data = result_df.to_csv(index=False).encode('utf-8')
		st.download_button(
			label="–°–∫–∞—á–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (CSV)",
			data=csv_data,
			file_name="bull_assignments.csv",
			mime="text/csv"
		)
	else:
		st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã!")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
with st.expander("‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º"):
	st.markdown("""
**–ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**

1. **–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö:**
   - –†–æ–¥–æ—Å–ª–æ–≤–Ω—ã–µ (ID –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –º–∞—Ç–µ—Ä–∏, –æ—Ç—Ü–∞)
   - –ë—ã–∫–∏ (ID –∏ EBV)
   - –ö–æ—Ä–æ–≤—ã (ID –∏ EBV)

2. **–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–æ–¥—Å—Ç–≤–∞:**
   - –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ–º–æ–∏–∑–∞—Ü–∏–∏
   - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä —Å —Ä–æ–¥—Å—Ç–≤–æ–º > 5%

3. **–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:**
   - –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ—Ä–æ–≤—ã —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –±—ã–∫–æ–≤
   - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é EBV –±—ã–∫–∞
   - –ü—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ EBV - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É —Å—É–º–º—ã EBV (–¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏)

4. **–ñ–∞–¥–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:**
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ max-heap –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö –ø–∞—Ä
   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –±—ã–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Å–µ–º–µ–Ω–∏—Ç—å > 10% –∫–æ—Ä–æ–≤
   - –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–æ–≤

5. **–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
   - –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –±—ã–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ—Ä–æ–≤—ã
   - –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ EBV –ø–æ—Ç–æ–º—Å—Ç–≤–∞
   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
""")

st.markdown("---")
st.caption("¬© 2023 –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–µ–ª–µ–∫—Ü–∏–∏ –ö–†–° | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞")